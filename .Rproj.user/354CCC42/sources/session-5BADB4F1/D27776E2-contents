---
output: github_document
---

<!-- README.md is generated from README.Rmd. Please edit that file -->

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  fig.path = "man/figures/README-",
  out.width = "100%",
  warning = FALSE,
  cache = TRUE
)
```

# ggfp: Easy way to draw a forest plot (fp) with ggplot2(gg)

[![lifecycle](https://img.shields.io/badge/lifecycle-experimental-%23fd8008.svg)](https://lifecycle.r-lib.org/articles/stages.html)
[![install with devtools](https://img.shields.io/badge/install%20with-devtools-brightgreen.svg)](https://cran.r-project.org/web/packages/devtools/index.html)
[![issues](https://img.shields.io/github/issues/lizhiwei1994/ggfp.svg)](https://github.com/lizhiwei1994/ggfp/issues)

## :bar_chart: Overview

The goal of `ggfp` is to simplify the process of drawing forest plots using ggplot2. We have packaged the main code for drawing forest plots to form the `gg_fp()` function. `gg_fp()` has the advantage that only a few parameters need to be provided to draw a nice forest plot. Of course, it also has the obvious disadvantage that some of the more fine-grained graph adjustment parameters are not available in `gg_fp()`.

## :arrow_double_down: Installation

You can install the development version of ggfp like so:

``` {r eval = FALSE}
devtools::install_github('lizhiwei1994/ggfp)
```

## :beginner: Usage

We use the data built into the `ggfp` package for the demonstration.
After you library the `ggfp` package, you can import the example data into R with the following code.

```{r, warning = F}
library(ggfp)
load(system.file('data', 'example_data.rda', package = 'ggfp'))
```

This is a basic example which shows you how to solve a common problem:

```{r example}
library(ggfp)
## basic example code

gg_fp(
  data = df,
  x_axis = people_name,
  point = b,
  low = low_95,
  up = up_95,
  group_var = group,
  facet_var = facet,
  facet_color = c(rep('white', 5)),
  group_color = c('red', 'green', 'yellow', 'orange'),
  point_shape = c(16, 16, 16, 16)
  
)
```

You can change the facet strip color by giving color name to `facet_color`.


```{r change facet color}
gg_fp(
  data = df,
  x_axis = people_name,
  point = b,
  low = low_95,
  up = up_95,
  group_var = group,
  facet_var = facet,
  facet_color = c('blue', 'red', 'purple', 'blue', 'red'),
  group_color = c('red', 'green', 'yellow', 'orange'),
  point_shape = c(16, 16, 16, 16)
  
)
```

In that case, don't forget to commit and push the resulting figure files, so they display on GitHub and CRAN.

## :page_with_curl: About Author

Zhiwei Li (lizhiwei@ccmu.edu.cn)

Department of Epidemiology and Health Statistics

School of Public Health, Capital Medical University

No.10 Xitoutiao, Youanmen Wai Street

Beijing, 100069
